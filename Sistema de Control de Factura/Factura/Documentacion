Estructura de carpetas
	CLS >
		Contamos con un AppManager la cual es la clase que controla todo
	GUI >
		En esta carpeta tenemos los Formularios 
			- Splash
			- Login
			- Principal

Funcionalidades

	***************************************************************************
	Splash >
		Objetos: 
			Timer: Cronometro que dura 5 segundos (5,000 milisegundos)

		private void Splash_Load(object sender, EventArgs e){} >
			Inicializa el cronometro al cargar el Splash.

		private void Cronometro_Tick(object sender, EventArgs e){} >
			Al acabar los ticks detiene el cronometro y cierra el formulario.

	***************************************************************************
	Login >
		Objetos: 
			Textbox: Para el nombre de Usuario
			MaskedTextbox: Para la contraseña
			Button: Aceptar 
			Button: Cancelar
			Label: Para indicarle errores en los datos al usuario
		
		Atributos:
			private Boolean _Autorizado = false;
		
		Retorno de Autorizado
			public bool Autorizado { get => _Autorizado; }
		
		Datos quemados:
			String _Usuario = "Juan";
			String _Clave = "123";
		
		private void btnAceptar_Click(object sender, EventArgs e){} >
			En caso de el textbox y el maskedbox sean iguales a los datos quemados 
			el valor de Autorizado será verdadero, y cerrara el formulario.
			Caso contrario cambiará el texto del label, para indicar errores.

		private void btnCancelar_Click(object sender, EventArgs e){}>
			Finaliza la ejecucion del codigo completo


	***************************************************************************

	Principal:

		private void btnTerminar_Click(object sender, EventArgs e){}
		Finaliza la ejecucion del codigo completo

	***************************************************************************
	AppManager>
		internal class AppManager : ApplicationContext
			Para poder pasar una clase como parametro en program.cs

		SplashScreen(){}>
			Inicia un objeto de tipo Splash, el cual está dentro de la carpeta GUI.

		private Boolean LoginScreen(){}>
			Crea un parametro booleano que inicia en falso, mientras el 
			resultado sea falso no permitirá ejecutar el siguiente objeto. 

		 public AppManager(){}>
			Constructor de AppManager que en base al valor que retorna 
			LoginScreen sea verdadero ejecutara un objeto de tipo Principal.

	***************************************************************************
